<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="e5740659-1b96-42fe-a381-53f799f814da" activeEnvironment="Default" name="DadosAlunos" resourceRoot="${projectDir}" soapui-version="5.3.0" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:restMockService id="92069bd1-18ab-44e7-9fd8-cabd0609d405" port="8088" path="/" host="localhost" name="AlunoService" docroot=""><con:settings/><con:properties/><con:restMockAction name="/alunos" method="GET" resourcePath="/alunos" id="9a5a544d-57ad-430b-b3ce-965b578d397c"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="listaAlunos" id="69bcfa5c-1300-4a27-93f2-b27eacf09486" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>[
   {
     "cpf": "123",
     "nome": "Danilo Ferreira",
     "endereco": "Rua Professor Queiroz Filho, 312",
     "cep": "37550-000",
     "email": "appstudentemailsender@gmail.com"	
    },
   {
     "cpf": "456",
     "nome": "Sarina Torres",
     "endereco": "Rua Professor Queiroz Filho, 312",
     "cep": "37550-000",
     "email": "appstudentemailsender@gmail.com"	
    },
    {
     "cpf": "789",
     "nome": "Um nome qualquer",
     "endereco": "Uma rua qualquer, 500",
     "cep": "37550-000",
     "email": "appstudentemailsender@gmail.com"	
    },
    {
     "cpf": "111",
     "nome": "Outro nome",
     "endereco": "Outra rua, 100",
     "cep": "37550-000",
     "email": "appstudentemailsender@gmail.com"	
    }
]</con:responseContent><con:header><con:name>status</con:name><con:value>todosAlunos</con:value></con:header></con:response></con:restMockAction></con:restMockService><con:restMockService id="2ef9d6a7-117d-4522-9119-a14831722f0d" port="8089" path="/" host="localhost" name="NotasAlunosService" docroot=""><con:settings/><con:properties/><con:restMockAction name="/alunos/123/notas" method="GET" resourcePath="/alunos/123/notas" id="faf25ea6-4eb6-482f-993b-b0b06872822a"><con:settings/><con:defaultResponse>notasAluno</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="notasAluno" id="b3080ee1-edc0-407d-b867-e34edf841e9b" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
     "cpf": "123",
     "notas": {
     	"disciplina1": 8,
     	"disciplina2": 3.5,
     	"disciplina3": 9
     }     
}</con:responseContent><con:header><con:name>status</con:name><con:value>notaAluno123</con:value></con:header></con:response></con:restMockAction><con:restMockAction name="/alunos/456/notas" method="GET" resourcePath="/alunos/456/notas" id="25ee527e-a9ed-4e01-beeb-5a42dbe580fa"><con:settings/><con:defaultResponse>notasAluno</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="notasAluno" id="dadb927c-e353-48e8-8ad7-e5befb6df794" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
     "cpf": "456",
     "notas": {
     	"disciplina1": 6,
     	"disciplina2": 5,
     	"disciplina3": 9
     }     
}</con:responseContent><con:header><con:name>status</con:name><con:value>notasAluno456</con:value></con:header></con:response></con:restMockAction><con:restMockAction name="/alunos/789/notas" method="GET" resourcePath="/alunos/789/notas" id="cc707904-7cb6-4373-a872-2503ce3846a0"><con:settings/><con:defaultResponse>notasAluno</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="notasAluno" id="b8a19539-3252-4576-86ed-71ef4d12806a" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
     "cpf": "789",
     "notas": {
     	"disciplina1": 7,
     	"disciplina2": 6.5,
     	"disciplina3": 9
     }     
}</con:responseContent><con:header><con:name>status</con:name><con:value>notasAluno789</con:value></con:header></con:response></con:restMockAction></con:restMockService><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/></con:soapui-project>